'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var axios = require('axios');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class AldiObject {
    constructor(aldi) {
        this.aldi = aldi;
    }
}

class Product extends AldiObject {
    /**
     * Gets product from ID
     * @param productId Product ID, formatted as "products/{category}/{articleNumber}.json"
     */
    getProductFromId(productId, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.aldi.get(`articles/${productId}.json`, additionalRequestOptions);
        });
    }
    /**
     * Get products from given product name
     * @param productName Product name to search for
     */
    getProductsFromName(productName, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.aldi.get(`articlesearch/${productName}.json`, additionalRequestOptions);
        });
    }
}

class Recipe extends AldiObject {
    /**
     * Gets recipe from ID
     * @param recipeId Recipe ID, formatted as "rezepte/{category}/{slug}.json"
     */
    getRecipeFromId(recipeId, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.aldi.get(`recipedetail/${recipeId}.json`, additionalRequestOptions);
        });
    }
    /**
     * Get recipes featured on the front page
     * @param options Query options
     * @param options.amount Amount of recipes to get (default 20)
     */
    getFeaturedRecipes(options, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const size = (options === null || options === void 0 ? void 0 : options.amount) || 20;
            return yield this.aldi.get(`recipes/size=${size}.json`, additionalRequestOptions);
        });
    }
    /**
     * Get recipes from given recipe name (will return all of them)
     * @param recipeName Recipe name to search for
     */
    getRecipesFromName(recipeName, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.aldi.get(`recipesearch/${recipeName}.json`, additionalRequestOptions);
        });
    }
}

class Promotion extends AldiObject {
    /**
     * Gets information from given promotion ID
     * @param promotionId Promotion ID, formatted as "wk{nr}_{start_day}_{start_date}" (from promotionId)
     */
    getPromotionFromId(promotionId, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.aldi.get(`promotions/${promotionId}.json`, additionalRequestOptions);
        });
    }
    /**
     * Gets currently active promotions
     */
    getCurrentPromotions(additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.aldi.get('promotions.json', additionalRequestOptions);
        });
    }
}

class Aldi {
    constructor(options) {
        var _a;
        this.endpoint = 'https://webservice.aldi.nl/api/';
        this.verbose = (_a = options === null || options === void 0 ? void 0 : options.verbose) !== null && _a !== void 0 ? _a : false;
        this.client = axios__default["default"].create();
        this.endpoint = (options === null || options === void 0 ? void 0 : options.apiVersion) ? this.endpoint + `v${options.apiVersion}/` : this.endpoint + 'v1/';
        this.aldiProduct = new Product(this);
        this.aldiPromotion = new Promotion(this);
        this.aldiRecipe = new Recipe(this);
    }
    product() {
        return this.aldiProduct;
    }
    promotion() {
        return this.aldiPromotion;
    }
    recipe() {
        return this.aldiRecipe;
    }
    get(path, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(path, exports.requestMethod.GET, undefined, additionalRequestOptions);
        });
    }
    request(path, method, body, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestHeader = this.createHeader(additionalRequestOptions === null || additionalRequestOptions === void 0 ? void 0 : additionalRequestOptions.headers);
            const url = this.createURL(path, additionalRequestOptions === null || additionalRequestOptions === void 0 ? void 0 : additionalRequestOptions.query);
            if (this.verbose) {
                console.log(url);
                console.log(method);
                console.log(requestHeader);
                void (body && console.log(body));
            }
            const response = yield this.client.request({
                method,
                url,
                headers: requestHeader,
                data: body
            });
            if (!response.statusText) {
                const text = response.data;
                throw new Error(`${response.statusText}: ${text}`);
            }
            return response.data;
        });
    }
    createHeader(extraHeaders) {
        // Create header
        const headers = Object.assign({ 'Content-Type': 'application/json', 'User-Agent': 'aldi-wrapper' }, extraHeaders);
        return headers;
    }
    createURL(path, query) {
        let url;
        if (query) {
            const params = new URLSearchParams(query);
            url = this.endpoint + path + '?' + params;
        }
        else {
            url = this.endpoint + path;
        }
        return url;
    }
}
/**
 * Simple enum for different request methods
 */
exports.requestMethod = void 0;
(function (requestMethod) {
    requestMethod["GET"] = "GET";
    requestMethod["POST"] = "POST";
    requestMethod["PUT"] = "PUT";
})(exports.requestMethod || (exports.requestMethod = {}));

exports.Aldi = Aldi;
exports.Product = Product;
exports.Promotion = Promotion;
exports.Recipe = Recipe;
