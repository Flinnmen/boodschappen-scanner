'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var axios = require('axios');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class PlusObject {
    constructor(plus) {
        this.plus = plus;
    }
}

class Product extends PlusObject {
    /**
     * Gets product for given product ID
     * @param productId 6-digit product ID
     */
    getProductFromId(productId, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.plus.get(`product/${productId}`, additionalRequestOptions);
        });
    }
    /**
     * Gets products for given product name
     * @param productName Query to search for
     * @param options Query options
     * @param options.limit Limit the number of results
     * @param options.storeId Limit the results to a specific store
     * @param options.cId Internal cId
     * @param options.sort Sort the results
     * @param options.ps Internal ps
     * @param options.parameters Internal parameters
     * @param options.nutriscore Limit the results to specific nutriscores
     * @param options.qualityLabel Limit the results to specific quality labels
     * @param options.diet Limit the results to specific diets
     * @param options.brands Limit the results to specific brands
     */
    getProductsFromName(productName, options, additionalRequestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const totalQuery = {
                tn_q: productName,
                tn_cid: ((_a = options === null || options === void 0 ? void 0 : options.cId) !== null && _a !== void 0 ? _a : '').toString(),
                tn_sort: ((_b = options === null || options === void 0 ? void 0 : options.sort) !== null && _b !== void 0 ? _b : '').toString(),
                tn_ps: ((_c = options === null || options === void 0 ? void 0 : options.ps) !== null && _c !== void 0 ? _c : '').toString(),
                tn_parameters: ((_d = options === null || options === void 0 ? void 0 : options.parameters) !== null && _d !== void 0 ? _d : '').toString(),
                tn_maxresults: ((_e = options === null || options === void 0 ? void 0 : options.limit) !== null && _e !== void 0 ? _e : '20').toString()
            };
            if (options === null || options === void 0 ? void 0 : options.storeId) {
                totalQuery['tn_fk_storeid'] = options.storeId.toString();
            }
            if (options === null || options === void 0 ? void 0 : options.nutriscore) {
                totalQuery['tn_fk_ae-nutriscore'] = options.nutriscore.map((n) => n.toString()).join('|');
            }
            if (options === null || options === void 0 ? void 0 : options.qualityLabel) {
                totalQuery['tn_fk_ae-keurmerken'] = options.qualityLabel.map((ql) => ql.toString()).join('|');
            }
            if (options === null || options === void 0 ? void 0 : options.diet) {
                totalQuery['tn_fk_ae-dieet'] = options.diet.map((d) => d.toString()).join('|');
            }
            if (options === null || options === void 0 ? void 0 : options.brands) {
                totalQuery['tn_fk_merk'] = options.brands.join('|');
            }
            return yield this.plus.get('navigation-search', Object.assign({ query: totalQuery }, additionalRequestOptions));
        });
    }
}
exports.ProductSortOptions = void 0;
(function (ProductSortOptions) {
    ProductSortOptions["Relevance"] = "Sorteeroptie Zoeken";
    ProductSortOptions["Sales"] = "Aanbiedingen";
    ProductSortOptions["PriceDesc"] = "Prijs aflopend";
    ProductSortOptions["PriceAsc"] = "Prijs oplopend";
})(exports.ProductSortOptions || (exports.ProductSortOptions = {}));
exports.Nutriscore = void 0;
(function (Nutriscore) {
    Nutriscore["A"] = "Score A";
    Nutriscore["B"] = "Score B";
    Nutriscore["C"] = "Score C";
    Nutriscore["D"] = "Score D";
    Nutriscore["E"] = "Score E";
})(exports.Nutriscore || (exports.Nutriscore = {}));
exports.QualityLabel = void 0;
(function (QualityLabel) {
    QualityLabel["Fairtrade"] = "Fairtrade";
    QualityLabel["Organic"] = "Biologisch";
    QualityLabel["MSC"] = "MSC";
    QualityLabel["BeterLeven1Star"] = "Beter Leven 1 Ster";
    QualityLabel["ASC"] = "ASC";
    QualityLabel["BeterLeven2Star"] = "Beter Leven 2 sterren";
    QualityLabel["BeterLeven3Star"] = "Beter Leven 3 sterren";
    QualityLabel["Planetproof"] = "Planetproof";
})(exports.QualityLabel || (exports.QualityLabel = {}));
exports.DietFilter = void 0;
(function (DietFilter) {
    DietFilter["Vegan"] = "Vegan";
    DietFilter["Vegetarian"] = "Vegetarisch";
})(exports.DietFilter || (exports.DietFilter = {}));

class Promotion extends PlusObject {
    /**
     * Get promotions for given store ID
     * @param storeId 3-digit store ID
     */
    getPromotionsFromStore(storeId, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.plus.get(`proxy/v3/promotions`, Object.assign({ query: {
                    storeId: storeId.toString()
                } }, additionalRequestOptions));
        });
    }
}

class Recipe extends PlusObject {
    /**
     * Get recipe from given recipe ID
     * @param recipeId UUID of the recipe
     */
    getRecipeFromId(recipeId, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.plus.get(`proxy/recipes/${recipeId}`, additionalRequestOptions);
        });
    }
    /**
     * Get recipes for given query
     * @param recipeName Query to search for
     * @param options Query options
     * @param options.sort Sort the results
     * @param options.type Limit the results to specific types
     * @param options.cookingTime Limit the results to specific cooking times
     */
    getRecipesFromName(recipeName, options, additionalRequestOptions) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.plus.get(`proxy/recipes/search`, Object.assign({ query: {
                    q: recipeName,
                    sort: ((_a = options === null || options === void 0 ? void 0 : options.sort) !== null && _a !== void 0 ? _a : 'dateStart_desc').toString(),
                    type: ((_c = (_b = options === null || options === void 0 ? void 0 : options.type) === null || _b === void 0 ? void 0 : _b.join('|')) !== null && _c !== void 0 ? _c : '').toString(),
                    cookingTime: ((_e = (_d = options === null || options === void 0 ? void 0 : options.cookingTime) === null || _d === void 0 ? void 0 : _d.join('|')) !== null && _e !== void 0 ? _e : '').toString()
                } }, additionalRequestOptions));
        });
    }
}
exports.RecipeType = void 0;
(function (RecipeType) {
    RecipeType["Dessert"] = "nagerecht";
    RecipeType["Snack"] = "tussendoortje";
    RecipeType["SideDish"] = "bijgerecht";
    RecipeType["Appetizer"] = "voorgerecht";
    RecipeType["Breakfast"] = "ontbijtgerecht";
    RecipeType["MainDish"] = "hoofdgerecht";
    RecipeType["Lunch"] = "Lunch";
    RecipeType["Drink"] = "Drankje";
    RecipeType["Soup"] = "soep";
    RecipeType["Brunch"] = "Brunch";
    RecipeType["Bite"] = "Hapje";
})(exports.RecipeType || (exports.RecipeType = {}));
exports.RecipeCookingTime = void 0;
(function (RecipeCookingTime) {
    RecipeCookingTime["ZeroToFifteenMinutes"] = "0-15";
    RecipeCookingTime["FifteenToThirtyMinutes"] = "15-30";
    RecipeCookingTime["ThirtyToSixtyMinutes"] = "30-60";
    RecipeCookingTime["MoreThanSixtyMinutes"] = "60-999";
})(exports.RecipeCookingTime || (exports.RecipeCookingTime = {}));

class Store extends PlusObject {
    /**
     * Get all stores
     */
    getStores(additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.plus.get('store', additionalRequestOptions);
        });
    }
}

class Plus {
    constructor(options) {
        var _a;
        this.endpoint = 'https://pls-sprmrkt-mw.prd.vdc1.plus.nl/api/';
        this.verbose = (_a = options === null || options === void 0 ? void 0 : options.verbose) !== null && _a !== void 0 ? _a : false;
        this.client = axios__default["default"].create();
        this.endpoint = (options === null || options === void 0 ? void 0 : options.apiVersion) ? this.endpoint + `v${options.apiVersion}/` : this.endpoint + 'v3/';
        this.plusProduct = new Product(this);
        this.plusPromotion = new Promotion(this);
        this.plusRecipe = new Recipe(this);
        this.plusStore = new Store(this);
    }
    product() {
        return this.plusProduct;
    }
    promotion() {
        return this.plusPromotion;
    }
    recipe() {
        return this.plusRecipe;
    }
    store() {
        return this.plusStore;
    }
    get(path, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(path, exports.requestMethod.GET, undefined, additionalRequestOptions);
        });
    }
    request(path, method, body, additionalRequestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestHeader = this.createHeader(additionalRequestOptions === null || additionalRequestOptions === void 0 ? void 0 : additionalRequestOptions.headers);
            const url = this.createURL(path, additionalRequestOptions === null || additionalRequestOptions === void 0 ? void 0 : additionalRequestOptions.query);
            if (this.verbose) {
                console.log(url);
                console.log(method);
                console.log(requestHeader);
                void (body && console.log(body));
            }
            const response = yield this.client.request({
                method,
                url,
                headers: requestHeader,
                data: body
            });
            if (!response.statusText) {
                const text = response.data;
                throw new Error(`${response.statusText}: ${text}`);
            }
            return response.data;
        });
    }
    createHeader(extraHeaders) {
        // Create header
        const headers = Object.assign({ 'Content-Type': 'application/json', 'User-Agent': 'plus-wrapper' }, extraHeaders);
        return headers;
    }
    createURL(path, query) {
        let url;
        if (query) {
            const params = new URLSearchParams(query);
            url = this.endpoint + path + '?' + params;
        }
        else {
            url = this.endpoint + path;
        }
        return url;
    }
}
/**
 * Simple enum for different request methods
 */
exports.requestMethod = void 0;
(function (requestMethod) {
    requestMethod["GET"] = "GET";
    requestMethod["POST"] = "POST";
    requestMethod["PUT"] = "PUT";
})(exports.requestMethod || (exports.requestMethod = {}));

exports.Plus = Plus;
exports.Product = Product;
exports.Promotion = Promotion;
exports.Recipe = Recipe;
exports.Store = Store;
